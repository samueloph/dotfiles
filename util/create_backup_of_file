#!/bin/bash

create_backup_of_file(){
    # Open a subshell as this is supposed to be sourced into other scripts
    # and we don't want to modify their environment (with the bash flags).
    (
        # Set bash strict mode, for extra safety.
        # This will make the execution stop if there are any errors, any unset
        # variable is used, or a command in a pipeline fails.
        set -euo pipefail

        # Path of this file, to be used to evaluate path of other files in the project.
        script_path="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

        # shellcheck disable=SC1094,SC1091
        source "$script_path/print_utils"

        if [[ $# -ne 1 ]]; then
            print_warning "Exactly 1 argument is required: create_backup_of_file <file_path>"
            exit 1
        fi

        # Path of this file, to be used to evaluate path of other files in the project.
        script_path="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
        project_toplevel="$script_path/.."

        changed_files_logfile="$project_toplevel/logs/changed_files_logfile"
        backup_files_logfile="$project_toplevel/logs/backup_files_logfile"
        backup_files_location="$project_toplevel/backups/"

        # Timestamp to use for backup file names.
        timestamp=$(date -d now +'%Y-%m-%d-%Hh%Mm%Ss')

        file_path="$1"
        backup_file_path="${backup_files_location}/$(basename ${file_path}).bkp-${timestamp}"

        mv "$file_path" "$backup_file_path"

        print_info "Backup file created for $file_path at $backup_file_path"

        # Log change.
        echo "$file_path" >> "$changed_files_logfile"
        echo "$backup_file_path" >> "$backup_files_logfile"
    )
}
